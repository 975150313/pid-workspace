########################################################################
############### variable utilisée pour gérer le build ##################
########################################################################

#ATTENTION POUR PLUS DE SECURITE TOUTES CES VARIABLES DOIVENT ETRE GENEREES EN CACHE INTERNAL !!!!!!!!!!!!!!!!

#pour gérer les dépendences du package ?
# ATTENTION ICI CE NE DOIVENT ÊTRE QUE DES DEPENDENCES EN TERME DE NOM
# dépendences directes uniquement

# gestion des dépendances
########################################################################
################### variable de déclaration de packages ################
########################################################################
# XXX_COMPONENTS
# XXX_COMPONENTS_APPS
# XXX_COMPONENTS_LIBS


########################################################################
######################## dépendences de PACKAGES #######################
########################################################################
# dependences EXTERNES
# XXX_EXTERNAL_DEPENDENCY_YYY_REFERENCE_PATH[_DEBUG]		# path de reference utilisé (défini dans le cache) pour trouver la racine de la dépendance externe (par exemple /opt/toto ou /home/robin/soft/bison), fixé par défaut à celui trouvé 

# il n'y a rien à faire pour les dépendances système car elles sont géré "par défaut" par le système

# XXX_EXTERNAL_DEPENDENCIES[_DEBUG]				

# dependences entre PACKAGES
# XXX_DEPENDENCIES[_DEBUG]			# les noms des packages qui sont directement utilisés
# XXX_DEPENDENCY_ZZZ_VERSION[_DEBUG]		# pour la dépendance au package ZZZ utiliser la version demandée : (si pas de contrainte de version ne rien faire)

# XXX_DEPENDENCY_ZZZ_VERSION_EXACT[_DEBUG]	# TRUE if exact version is required
# XXX_DEPENDENCY_ZZZ_COMPONENTS[_DEBUG]		# liste des composants de ZZZ utilisés par XXX


########################################################################
################### variable de déclaration de composants ##############
########################################################################

#identifying precisely the software elements of the component
# XXX_YYY_TYPE			# type du composant YYY
# XXX_YYY_HEADER_DIR_NAME	
# XXX_YYY_HEADERS		# liste des header files à trouver pour trouver s'assurer que le composant librarie YYY est bien installé
				# leur path est relative par rapport au path du package/include/${XXX_YYY_HEADER_DIR_NAME}

# XXX_YYY_BINARY_NAME[_DEBUG]

# pour les libs :
# XXX_YYY_INC_DIRS[_DEBUG]	# path to external include directories 	
# XXX_YYY_DEFS[_DEBUG]		# definitions propres à utiliser pour compiler avec le composant librarie YYY (l'include dir est celui du package) 
				# + cflags système/externes 
# XXX_YYY_LINKS[_DEBUG]		# flags + libraries système/externes à utiliser pour linker avec le composant librarie YYY


########################################################################
################# dépendences de COMPOSANTS ############################
########################################################################
# dependence INTERNES
# XXX_YYY_INTERNAL_DEPENDENCIES[_DEBUG]			# les noms associés aux composants du package XXX dont le composant YYY du package XXX dépend
# pas besoin de checker ces dépendences sont satisfaites par défaut du moment que toutes les dépendences de tous les composants sont satisfaites
# XXX_YYY_INTERNAL_EXPORT_ZZZ[_DEBUG]			# permet de savoir si le composant YYY exporte le composant ZZZ


# dépendences entre PACKAGES
# XXX_YYY_DEPENDENCIES[_DEBUG]			# les dépendances (packages) utilisés par le composant courant
						# à partir de là c'est pour chaque package dépendent
# XXX_YYY_DEPENDENCY_ZZZ_COMPONENTS[_DEBUG]	# les composants du package ZZZ utilisés par YYY
# XXX_YYY_EXPORT_ZZZ_VVV[_DEBUG]		# permet de savoir si le composant YYY du package XXX exporte le composant VVV du package ZZZ


