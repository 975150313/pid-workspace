variables:
  PACKAGE_HAS_LIBRARIES: "@PACKAGE_CI_HAS_LIBRARIES@"
  PACKAGE_HAS_TESTS: "@PACKAGE_CI_HAS_TESTS@"
  PACKAGE_HAS_EXAMPLES: "@PACKAGE_CI_HAS_EXAMPLES@"
  PACKAGE_HAS_SITE: "@PACKAGE_CI_HAS_SITE@"
  PACKAGE_BINARIES_PUBLISHED: "@PACKAGE_CI_PUBLISH_BINARIES@"

cache:  
  key: "$CI_BUILD_REF/$CI_BUILD_REF_NAME"
  paths:
   - binaries/
   - build/

stages:
 - configure
 - compile
 - test
 - install
 - deploy
 - cleanup

before_script:
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'

############ patterns for in job description #############

# Hidden key that defines an anchor for reusing artifacts def when a build fails
.artifacts_:
    artifacts: &artifacts_upload
        name: "artefacts_${CI_BUILD_REF_NAME}"
        paths:
          - build/release/share/dependencies.txt
          - build/debug/share/coverage.tgz
          - build/release/share/staticchecks.tgz

# Hidden key that defines an anchor for reusing artifacts uploaded when a build fails
.artifacts_when_failing_: 
    artifacts: &artifacts_on_failure  
        name: "artefacts_${CI_BUILD_REF_NAME}"
        paths:
          - build/release/share/dependencies.txt
        when: on_failure

# Hidden key that defines an anchor for reusing code relative to integration branch
.selection_integration_: &job_selection_integration  
    only:
        - integration

# Hidden key that defines an anchor for reusing code relative to released versions
.selection_release_: &job_selection_release  
    only:
         - tags
         - /^v.*$/

.test_any_: &test_job
    stage: test
    script:
         - chmod 700 ./share/ci/test_package.sh
         - ./share/ci/test_package.sh

.compile_any_: &compile_job
    stage: compile
    script:
         - cd build && cmake --build . && cd ..

.cleanup_any_: &cleanup_job
   stage: cleanup
   script:
     - cd build && rm -Rf * && cd ..
     - cd binaries && rm -Rf * && cd ..
   when: always

############ generic jobs patterns #############

### configure (CMake project configuration) 
.configure_integration_: &configure_integration
    stage: configure
    script:
         - chmod 700 ./share/ci/prepare_package_ci.sh
         - ./share/ci/prepare_package_ci.sh
         - chmod 700 ./share/ci/configure_package_integration.sh
         - ./share/ci/configure_package_integration.sh
    <<: *job_selection_integration

.configure_release_: &configure_release
    stage: configure
    script:
         - chmod 700 ./share/ci/prepare_package_ci.sh
         - ./share/ci/prepare_package_ci.sh
         - chmod 700 ./share/ci/configure_package_release.sh
         - ./share/ci/configure_package_release.sh
    <<: *job_selection_release
 
### compile  

.compile_integration_: &compile_integration
    <<: *compile_job
    artifacts: *artifacts_on_failure
    <<: *job_selection_integration

.compile_release_: &compile_release
    <<: *compile_job
    artifacts: *artifacts_on_failure
    <<: *job_selection_release

### run tests 

.test_integration_: &test_integration
    <<: *test_job
    artifacts: *artifacts_on_failure
    <<: *job_selection_integration

.test_release_: &test_release
    <<: *test_job
    artifacts: *artifacts_on_failure
    <<: *job_selection_release

### install package into the workspace

.install_integration_: &install_integration
    stage: install
    script:
         - cd build && cmake --build . --target install && cd ..
    artifacts: *artifacts_on_failure
    <<: *job_selection_integration

.install_release_: &install_release
    stage: install
    script:
         - chmod 700 ./share/ci/install_package_release.sh
         - ./share/ci/install_package_release.sh
    artifacts: *artifacts_on_failure
    <<: *job_selection_release

### deploy (make interesting part of the result available wiki+doc, binaries)

.deploy_integration_: &deploy_integration
    stage: deploy
    script:
         - chmod 700 ./share/ci/deploy_package_integration.sh
         - ./share/ci/deploy_package_integration.sh
    artifacts: *artifacts_upload
    <<: *job_selection_integration

.deploy_release_: &deploy_release
    stage: deploy
    script:
         - chmod 700 ./share/ci/deploy_package_release.sh
         - ./share/ci/deploy_package_release.sh
    artifacts: *artifacts_upload
    <<: *job_selection_release

### cleanup when pipeline is finished

.cleanup_integration_: &cleanup_integration
  <<: *cleanup_job
  <<: *job_selection_integration

.cleanup_release_: &cleanup_release
  <<: *cleanup_job
  <<: *job_selection_release

############ patterns for platforms selection #############
# here the project generates patterns for runner selection according for all platforms defined in the workspace



