variables:
  PACKAGE_HAS_LIBRARIES: "@PACKAGE_CI_HAS_LIBRARIES@"
  PACKAGE_HAS_TESTS: "@PACKAGE_CI_HAS_TESTS@"
  PACKAGE_HAS_EXAMPLES: "@PACKAGE_CI_HAS_EXAMPLES@"
  PACKAGE_HAS_SITE: "@PACKAGE_CI_HAS_SITE@"
  PACKAGE_BINARIES_PUBLISHED: "@PACKAGE_CI_PUBLISH_BINARIES@"
  PACKAGE_DEV_INFO_PUBLISHED: "@PACKAGE_CI_PUBLISH_DEV_INFO@"

cache:
  key: "$CI_BUILD_REF/$CI_BUILD_REF_NAME"
  paths:
   - binaries/
   - build/

stages:
 - configure
 - build
 - deploy
 - cleanup

############ patterns for in job description #############

# Hidden key that defines an anchor for reusing artifacts def
.artifacts_integration_:
    artifacts: &artifacts_integration
        name: "artefacts_${CI_BUILD_REF_NAME}"
        paths:
          - build/release/share/developper_info.tgz

.artifacts_release_:
    artifacts: &artifacts_release
        name: "artefacts_${CI_BUILD_REF_NAME}"
        paths:
          - build/release/share/dependencies.txt

# Hidden key that defines an anchor for reusing artifacts uploaded when a build fails
.artifacts_when_failing_:
    artifacts: &artifacts_on_failure
        name: "artefacts_${CI_BUILD_REF_NAME}"
        paths:
          - build/release/share/dependencies.txt
        when: on_failure

# Hidden key that defines an anchor for reusing code relative to integration branch
.selection_integration_: &job_selection_integration
    only:
        - integration

# Hidden key that defines an anchor for reusing code relative to released versions
.selection_release_: &job_selection_release
    only:
         - tags
         - /^v.*$/

.build_any_: &build_job
    stage: build
    script:
      - chmod 700 ./share/ci/build_package.sh
      - ./share/ci/build_package.sh

.cleanup_any_: &cleanup_job
   stage: cleanup
   script:
     - chmod 700 ./share/ci/cleanup_package.sh
     - ./share/ci/cleanup_package.sh
   when: always

############ generic jobs patterns #############

### configure (CMake project configuration)
.configure_integration_: &configure_integration
    stage: configure
    script:
         - chmod 700 ./share/ci/prepare_package_ci.sh
         - ./share/ci/prepare_package_ci.sh
         - chmod 700 ./share/ci/configure_package_integration.sh
         - ./share/ci/configure_package_integration.sh
    <<: *job_selection_integration

.configure_release_: &configure_release
    stage: configure
    script:
         - chmod 700 ./share/ci/prepare_package_ci.sh
         - ./share/ci/prepare_package_ci.sh
         - chmod 700 ./share/ci/configure_package_release.sh
         - ./share/ci/configure_package_release.sh
    <<: *job_selection_release

### build

.build_integration_: &build_integration
    <<: *build_job
    artifacts: *artifacts_on_failure
    <<: *job_selection_integration

.build_release_: &build_release
    <<: *build_job
    artifacts: *artifacts_on_failure
    <<: *job_selection_release


### deploy (make interesting part of the result available wiki+doc, binaries)

.deploy_integration_: &deploy_integration
    stage: deploy
    script:
         - chmod 700 ./share/ci/deploy_package_integration.sh
         - ./share/ci/deploy_package_integration.sh
    artifacts: *artifacts_integration
    <<: *job_selection_integration

.deploy_release_: &deploy_release
    stage: deploy
    script:
         - chmod 700 ./share/ci/deploy_package_release.sh
         - ./share/ci/deploy_package_release.sh
    artifacts: *artifacts_release
    <<: *job_selection_release

### cleanup when pipeline is finished

.cleanup_integration_: &cleanup_integration
  <<: *cleanup_job
  <<: *job_selection_integration

.cleanup_release_: &cleanup_release
  <<: *cleanup_job
  <<: *job_selection_release

############ patterns for platforms selection #############
# here the project generates patterns for runner selection according for all platforms defined in the workspace
