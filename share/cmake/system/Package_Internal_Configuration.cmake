
#######################################################################################################
############# variables generated by generic functions using the Use<package>-<version>.cmake #########
############# files of each dependent package - contain full path information #########################
#######################################################################################################
# for libraries components
# XXX_YYY_INCLUDE_DIRS[_DEBUG]	# all include path to use to build an executable with the library component YYY of package XXX
# XXX_YYY_DEFINITIONS[_DEBUG]	# all definitions to use to build an executable with the library component YYY of package XXX
# XXX_YYY_LIBRARIES[_DEBUG]	# all libraries path to use to build an executable with the library component YYY of package XXX

########### this part is for runtime purpose --- see later ##############
# for application components
# XXX_YYY_EXECUTABLE[_DEBUG]	# path to the executable component YYY of package XXX

# for "launch" components (not currently existing)
# XXX_YYY_APPS[_DEBUG]		# all executables of a distributed application defined by launch component YYY of package XXX
# XXX_YYY_APP_ZZZ_PARAMS[_DEBUG]# all parameters used  
# XXX_YYY_APP_ZZZ_PARAM_VVV	# string parameter VVV for application ZZZ used by the launch file YYY of package XXX 

#TODO managing the automatic installation of binay packages or git repo (if not exist) !!

##################################################################################
####################### configuring build time dependencies ######################
##################################################################################
###
function(test_Package_Location DEPENDENCIES_NOTFOUND package dependency)
	if(NOT ${${dependency}_FOUND})

		if(${${package}_DEPENDENCY_${dependency}_VERSION} STREQUAL "")
			message(SEND_ERROR "The required package ${a_dependency} has not been found !")
		elseif(${${package}_DEPENDENCY_${dependency}_VERSION_EXACT})
			message(SEND_ERROR "The required package ${a_dependency} with exact version ${${package}_DEPENDENCY_${dependency}_VERSION} has not been found !")
		else()
			message(SEND_ERROR "The required package ${a_dependency} with version compatible with ${${package}_DEPENDENCY_${dependency}_VERSION} has not been found !")
		endif()
		set(${DEPENDENCIES_NOTFOUND} ${DEPENDENCIES_NOTFOUND} ${dependency} PARENT_SCOPE)
	endif()
endfunction()


###
# each dependent package version is defined as ${package}_DEPENDENCY_${dependency}_VERSION
# other variables set by the package version use file 
# ${package}_DEPENDENCY_${dependency}_REQUIRED		# TRUE if package is required FALSE otherwise (QUIET MODE)
# ${package}_DEPENDENCY_${dependency}_VERSION		# version if a version if specified
# ${package}_DEPENDENCY_${dependency}_VERSION_EXACT	# TRUE if exact version is required
# ${package}_DEPENDENCY_${dependency}_COMPONENTS	# list of components
function(resolve_Package_Dependency package dependency)

if(${dependency}_FOUND) #the dependency has already been found (previously found in iteration or recursion, not possible to import it again)
	if(${package}_DEPENDENCY_${dependency}_VERSION) # a specific version is required
	 	if( ${package}_DEPENDENCY_${dependency}_VERSION_EXACT) #an exact version is required
			
			is_Exact_Version_Compatible_With_Previous_Constraints(IS_COMPATIBLE NEED_REFIND ${dependency} ${${package}_DEPENDENCY_${dependency}_VERSION}) # will be incompatible if a different exact version already required OR if another major version required OR if another minor version greater than the one of exact version
 
			if(IS_COMPATIBLE)
				if(NEED_REFIND)
					# OK installing the exact version instead
					#WARNING call to find package
					find_package(
						${dependency} 
						${${package}_DEPENDENCY_${dependency}_VERSION} 
						EXACT
						MODULE
						REQUIRED
						${${package}_DEPENDENCY_${dependency}_COMPONENTS}
					)
				endif()
				return()				
			else() #not compatible
				message(FATAL_ERROR "impossible to find compatible versions regarding versions constraints for package ${package}")
				return()
			endif()
		else()#not an exact version required
			is_Version_Compatible_With_Previous_Constraints (
					COMPATIBLE_VERSION VERSION_TO_FIND 
					${dependency} ${${package}_DEPENDENCY_${dependency}_VERSION})
			if(COMPATIBLE_VERSION)
				if(VERSION_TO_FIND)
					find_package(
						${dependency} 
						${VERSION_TO_FIND}
						MODULE
						REQUIRED
						${${package}_DEPENDENCY_${dependency}_COMPONENTS}
					)
				else()
					return() # nothing to do more, the current used version is compatible with everything 	
				endif()
			else()
				message(FATAL_ERROR "impossible to find compatible versions regarding versions constraints for package ${package}")
				return()
			endif()
		endif()
	else()
		return()#by default the version is compatible (no constraints) so return 
	endif()
else()#the dependency has not been already found
	if(	${package}_DEPENDENCY_${dependency}_VERSION)
		
		if(${package}_DEPENDENCY_${dependency}_VERSION_EXACT) #an exact version has been specified
			#WARNING recursive call to find package
			find_package(
				${dependency} 
				${${package}_DEPENDENCY_${dependency}_VERSION} 
				EXACT
				MODULE
				REQUIRED
				${${package}_DEPENDENCY_${dependency}_COMPONENTS}
			)

		else()
			#WARNING recursive call to find package
			find_package(
				${dependency} 
				${${package}_DEPENDENCY_${dependency}_VERSION} 
				MODULE
				REQUIRED
				${${package}_DEPENDENCY_${dependency}_COMPONENTS}
			)
		endif()
	else()
		find_package(
			${dependency} 
			MODULE
			REQUIRED
			${${package}_DEPENDENCY_${dependency}_COMPONENTS}
		)
	endif()
endif()
test_Package_Location(DEPENDENCIES_NOTFOUND ${package} ${dependency})
set(${package}_DEPENDENCIES_NOTFOUND ${DEPENDENCIES_NOTFOUND} PARENT_SCOPE)
endfunction(resolve_Package_Dependency)

###
function (update_Config_Include_Dirs package component dep_package dep_component)
	if(${dep_package}_${dep_component}_INCLUDE_DIRS${USE_MODE_SUFFIX})	
		set(${package}_${component}_INCLUDE_DIRS${USE_MODE_SUFFIX} ${${package}_${component}_INCLUDE_DIRS${USE_MODE_SUFFIX}} ${${dep_package}_${dep_component}_INCLUDE_DIRS${USE_MODE_SUFFIX}} CACHE INTERNAL "")
	endif()
endfunction(update_Config_Include_Dirs)

###
function (update_Config_Definitions package component dep_package dep_component)
	if(${dep_package}_${dep_component}_DEFINITIONS${USE_MODE_SUFFIX})
		set(${package}_${component}_DEFINITIONS${USE_MODE_SUFFIX} ${${package}_${component}_DEFINITIONS${USE_MODE_SUFFIX}} ${${dep_package}_${dep_component}_DEFINITIONS${USE_MODE_SUFFIX}} CACHE INTERNAL "")
	endif()
endfunction(update_Config_Definitions)

###
function(update_Config_Libraries package component dep_package dep_component)
	if(${dep_package}_${dep_component}_LIBRARIES${USE_MODE_SUFFIX})
		set(${package}_${component}_LIBRARIES${USE_MODE_SUFFIX} ${${package}_${component}_LIBRARIES${USE_MODE_SUFFIX}} ${${dep_package}_${dep_component}_LIBRARIES${USE_MODE_SUFFIX}} CACHE INTERNAL "")
	endif()
endfunction(update_Config_Libraries)

###
function(init_Component_Build_Variables package component path_to_version)
	message("init : ${package} ${component} ${path_to_version}")
	set(${package}_${component}_INCLUDE_DIRS${USE_MODE_SUFFIX} "" CACHE INTERNAL "")
	set(${package}_${component}_DEFINITIONS${USE_MODE_SUFFIX} "" CACHE INTERNAL "")
	set(${package}_${component}_LIBRARIES${USE_MODE_SUFFIX} "" CACHE INTERNAL "")
	set(${package}_${component}_EXECUTABLE${USE_MODE_SUFFIX} "" CACHE INTERNAL "")
	is_Executable_Component(COMP_IS_EXEC ${package} ${component})
	
	if(NOT COMP_IS_EXEC)
		#provided include dirs (cflags -I<path>)
		set(${package}_${component}_INCLUDE_DIRS${USE_MODE_SUFFIX} "${path_to_version}/include/${${package}_${component}_HEADER_DIR_NAME}" CACHE INTERNAL "")
		
		#additional provided include dirs (cflags -I<path>) (external/system exported include dirs)
		if(${package}_${component}_INC_DIRS${USE_MODE_SUFFIX})
			set(	${package}_${component}_INCLUDE_DIRS${USE_MODE_SUFFIX} 
				${${package}_${component}_INCLUDE_DIRS${USE_MODE_SUFFIX}} 
				${${package}_${component}_INC_DIRS${USE_MODE_SUFFIX}} 
				CACHE INTERNAL "")
		endif()
		#provided cflags (own CFLAGS and external/system exported CFLAGS)
		if(${package}_${component}_DEFS${USE_MODE_SUFFIX}) 	
			set(${package}_${component}_DEFINITIONS${USE_MODE_SUFFIX} ${${package}_${component}_DEFS${USE_MODE_SUFFIX}} CACHE INTERNAL "")
		endif()

		#provided library (ldflags -l<path>)
		if(NOT ${package}_${component}_TYPE STREQUAL "HEADER")
			set(${package}_${component}_LIBRARIES${USE_MODE_SUFFIX} "${path_to_version}/lib/${${package}_${component}_BINARY_NAME${USE_MODE_SUFFIX}}" CACHE INTERNAL "")
		endif()

		#provided additionnal ld flags (exported external/system libraries and ldflags)
		if(${package}_${component}_LINKS${USE_MODE_SUFFIX})
			set(	${package}_${component}_LIBRARIES${USE_MODE_SUFFIX} 
				${${package}_${component}_LIBRARIES${USE_MODE_SUFFIX}}
				${${package}_${component}_LINKS${USE_MODE_SUFFIX}} 
				CACHE INTERNAL "")
		endif()
		
	elseif(${package}_${component}_TYPE STREQUAL "APP" OR ${package}_${component}_TYPE STREQUAL "EXAMPLE")
		
		set(${package}_${component}_EXECUTABLE${USE_MODE_SUFFIX} "${path_to_version}/bin/${${package}_${component}_BINARY_NAME${USE_MODE_SUFFIX}}" CACHE INTERNAL "")
	endif()
endfunction(init_Component_Build_Variables)

### 
function(update_Component_Build_Variables_With_Dependency package component dep_package dep_component)
configure_Package_Build_Variables(${dep_package})#!! recursion to get all updated infos
if(${package}_${component}_EXPORT_${dep_package}_${dep_component})
	update_Config_Include_Dirs(${package} ${component} ${dep_package} ${dep_component})
	update_Config_Definitions(${package} ${component} ${dep_package} ${dep_component})
	update_Config_Libraries(${package} ${component} ${dep_package} ${dep_component})	
else()
	if(NOT ${dep_package}_${dep_component}_TYPE STREQUAL "SHARED")#static OR header lib
		update_Config_Libraries(${package} ${component} ${dep_package} ${dep_component})
	endif()
	
endif()
endfunction(update_Component_Build_Variables_With_Dependency package)


function(update_Component_Build_Variables_With_Internal_Dependency package component dep_component)
if(${package}_${component}_INTERNAL_EXPORT_${dep_component})
	message("${package} : ${component} EXPORTS ${dep_component}")
	update_Config_Include_Dirs(${package} ${component} ${package} ${dep_component})
	update_Config_Definitions(${package} ${component} ${package} ${dep_component})
	update_Config_Libraries(${package} ${component} ${package} ${dep_component})	
else()#dep_component is not exported by component
	if(NOT ${package}_${dep_component}_TYPE STREQUAL "SHARED")#static OR header lib
		message("${package} : ${component} does not export ${dep_component}")
		update_Config_Libraries(${package} ${component} ${package} ${dep_component})
	endif()
	
endif()
endfunction(update_Component_Build_Variables_With_Internal_Dependency)


function(resolve_Package_Build_Dependencies package)
# 1) managing package dependencies (the list of dependent packages is defined as ${package_name}_DEPENDENCIES)
# - locating dependent packages in the workspace and configuring their build variables recursively 
foreach(dep_pack IN ITEMS ${${package}_DEPENDENCIES${USE_MODE_SUFFIX}})
	# 1) resolving direct dependencies
	resolve_Package_Dependency(${package} ${dep_pack})
	if(${dep_pack}_FOUND)
		if(${package}_DEPENDENCIES${USE_MODE_SUFFIX})
			resolve_Package_Build_Dependencies(${dep_pack})#recursion : resolving dependencies for each package dependency
		endif()
	else() #package dependency not resolved 
		list(APPEND ${package}_NOT_FOUND_DEPS ${dep_pack})		
	endif()
endforeach()
# 2) for not found package
if(${package}_NOT_FOUND_DEPS)
	message("there are not found dependencies !!")
	foreach(not_found_dep_pack IN ITEMS ${${package}_NOT_FOUND_DEPS})
		if(REQUIRED_PACKAGES_AUTOMATIC_DOWNLOAD)
			message(FATAL_ERROR "there are some unresolved required package dependencies : ${${PROJECT_NAME}_TOINSTALL_PACKAGES}. Automatic download of package not supported yet")#TODO
			return()
		else()	
			message(FATAL_ERROR "there are some unresolved required package dependencies : ${${PROJECT_NAME}_TOINSTALL_PACKAGES}. You may download them \"by hand\" or use the required packages automatic download option")
			return()
		endif()
	endforeach()
endif()
endfunction(resolve_Package_Build_Dependencies)

###
function(configure_Package_Build_Variables package_name)
if(${package_name}_PREPARE_BUILD)#this is a guard to limit recursion
	return()
endif()

if(${package_name}_DURING_PREPARE_BUILD)
	message(FATAL_ERROR "Alert : you have define cyclic dependencies between packages : Package ${package_name} is directly or undirectly requiring itself !")
endif()

set(${package_name}_DURING_PREPARE_BUILD TRUE)
message("preparing build for ${package_name}")

# 1) initializing all build variable that are directly provided by each component of the target package
foreach(a_component IN ITEMS ${${package_name}_COMPONENTS})
	message("init variable for ${a_component}")
	init_Component_Build_Variables(${package_name} ${a_component} ${${package_name}_ROOT_DIR})
endforeach()

# 2) setting build variables with informations coming from package dependancies
foreach(a_component IN ITEMS ${${package_name}_COMPONENTS}) 
	foreach(a_package IN ITEMS ${${package_name}_${a_component}_DEPENDENCIES})
		message("undirect dependencies for ${package_name} ${a_component}") 
		foreach(a_dep_component IN ITEMS ${${package_name}_${a_component}_DEPENDENCY_${a_package}_COMPONENTS}) 
			update_Component_Build_Variables_With_Dependency(${package_name} ${a_component} ${a_package} ${a_dep_component})
		endforeach()
	endforeach()		
endforeach()

#3) setting build variables with informations coming from INTERNAL package dependancies
# these have not been checked like the others since the package components discovering mecanism has already done the job 
foreach(a_component IN ITEMS ${${package_name}_COMPONENTS}) 
	foreach(a_dep_component IN ITEMS ${${package_name}_${a_component}_INTERNAL_DEPENDENCIES}) 
		update_Component_Build_Variables_With_Internal_Dependency(${package_name} ${a_component} ${a_dep_component})
	endforeach()
endforeach()

set(${package_name}_PREPARE_BUILD TRUE)
set(${package_name}_DURING_PREPARE_BUILD FALSE)
# no need to check system/external dependencies as they are already  treaten as special cases (see variable <package>__<component>_LINKS and <package>__<component>_DEFS of components)
# quite like in pkg-config tool
endfunction(configure_Package_Build_Variables)


##################################################################################
################## binary packages configuration #################################
##################################################################################

### resolve runtime dependencies for packages
function(resolve_Package_Runtime_Dependencies package build_mode)
if(${package}_PREPARE_RUNTIME)#this is a guard to limit recursion -> the runtime has already been prepared
	return()
endif()

if(${package}_DURING_PREPARE_RUNTIME)
	message(FATAL_ERROR "Alert : cyclic dependencies between packages found : Package ${package_name} is undirectly requiring itself !")
	return()
endif()
set(${package}_DURING_PREPARE_RUNTIME TRUE)

if(${package}_DEPENDENCIES) #first resolving dependencies by recursion
	foreach(dep IN ITEMS ${${package}_DEPENDENCIES})
		resolve_Package_Runtime_Dependencies(${dep} ${build_mode})
	endforeach()
endif()
foreach(component IN ITEMS ${${package}_COMPONENTS})
	resolve_Bin_Component_Runtime_Dependencies(${package} ${component} ${build_mode})
endforeach()
set(${package}_DURING_PREPARE_RUNTIME FALSE)
set(${package}_PREPARE_RUNTIME TRUE)
endfunction(resolve_Package_Runtime_Dependencies)


### resolve runtime dependencies for components
function(resolve_Bin_Component_Runtime_Dependencies package component mode)
if(	${package}_${component}_TYPE STREQUAL "SHARED" 
	OR ${package}_${component}_TYPE STREQUAL "APP" 
	OR ${package}_${component}_TYPE STREQUAL "EXAMPLE")
	get_Bin_Component_Runtime_Dependencies(ALL_SHARED_LIBS ${package} ${component} ${mode})#suppose that findPackage has resolved everything
	create_Bin_Component_Symlinks(${package} ${component} ${mode} "${ALL_SHARED_LIBS}")
endif()
endfunction(resolve_Bin_Component_Runtime_Dependencies)


### configuring components runtime paths (links to libraries)
function(create_Bin_Component_Symlinks bin_package bin_component mode shared_libs)
if(mode MATCHES Release)
	set(mode_string "")
elseif(mode MATCHES Debug)
	set(mode_string "-dbg")
else()
	return()
endif()

foreach(lib IN ITEMS ${shared_libs})
	get_filename_component(A_LIB_FILE ${lib} NAME)
	EXECUTE_PROCESS(
		COMMAND ${CMAKE_COMMAND} -E remove -f ${${bin_package}_ROOT_DIR}/.rpath/${bin_component}${mode_string}/${lib}
		COMMAND ${CMAKE_COMMAND} -E create_symlink ${${bin_package}_ROOT_DIR}/.rpath/${bin_component}${mode_string}/${lib} ${A_LIB_FILE}
	)
endforeach()
endfunction(create_Bin_Component_Symlinks)


### recursive function to find runtime dependencies
function(get_Bin_Component_Runtime_Dependencies ALL_SHARED_LIBS package component mode)
	if(mode MATCHES Release)
		set(mode_binary_suffix "")
		set(mode_var_suffix "")
	elseif(mode MATCHES Debug)
		set(mode_binary_suffix "-dbg")
		set(mode_var_suffix "_DEBUG")
	else()
		return()
	endif()
	set(result "")
	# 1) adding direct external dependencies
	if(${package}_${component}_LINKS${mode_var_suffix})
		foreach(lib IN ITEMS ${${package}_${component}_LINKS${mode_var_suffix}})
			get_filename_component(LIB_TYPE ${lib} EXT)
			if(LIB_TYPE)
				if(UNIX AND NOT APPLE) 		
					if(LIB_TYPE MATCHES "^.*\.so(\..+)*$")#found shared lib
						list(APPEND result ${lib})#adding external dependencies
					endif()
				elseif(APPLE)
					if(LIB_TYPE MATCHES "^.*\.dylib(\..+)*$")#found shared lib
						list(APPEND result ${lib})#adding external dependencies
					endif()
				endif()
			endif()
		endforeach()
	endif()
	
	# 2) adding package components dependencies
	foreach(dep_pack IN ITEMS ${package}_${component}_DEPENDENCIES${mode_var_suffix})
		foreach(dep_comp IN ITEMS ${package}_${component}_DEPENDENCY_${dep_pack}_COMPONENTS${mode_var_suffix})
			if(${dep_pack}_${dep_comp}_TYPE STREQUAL "HEADER" OR ${dep_pack}_${dep_comp}_TYPE STREQUAL "STATIC")		
				get_Bin_Component_Runtime_Dependencies(INT_DEP_SHARED_LIBS ${dep_pack} ${dep_comp} ${mode}) #need to resolve external symbols whether the component is exported or not (it may have unresolved symbols coming from shared libraries)
				if(INT_DEP_SHARED_LIBS)
					list(APPEND result ${INT_DEP_SHARED_LIBS})
				endif()
			elseif(${dep_pack}_${dep_comp}_TYPE STREQUAL "SHARED")
				list(APPEND result ${${dep_pack}_ROOT_DIR}/lib/${${dep_pack}_${dep_comp}_BINARY_NAME${mode_var_suffix}})#the shared library is a direct dependency of the component
				is_Bin_Component_Exporting_Other_Components(EXPORTING ${dep_pack} ${dep_comp} ${mode})
				if(EXPORTING) # doing transitive search only if shared libs export something
					get_Bin_Component_Runtime_Dependencies(INT_DEP_SHARED_LIBS ${dep_pack} ${dep_comp} ${mode}) #need to resolve external symbols whether the component is exported or not
					if(INT_DEP_SHARED_LIBS)# guarding against shared libs presence
						list(APPEND result ${INT_DEP_SHARED_LIBS})
					endif()
				endif() #no need to resolve external symbols if the shared library component is not exported
			endif()
		endforeach()
	endforeach()


	# 3) adding internal components dependencies (only case when recursion is needed)
	foreach(int_dep IN ITEMS ${package}_${component}_INTERNAL_DEPENDENCIES${mode_var_suffix})
		if(${package}_${int_dep}_TYPE STREQUAL "HEADER" OR ${package}_${int_dep}_TYPE STREQUAL "STATIC")		
			get_Bin_Component_Runtime_Dependencies(INT_DEP_SHARED_LIBS ${package} ${int_dep} ${mode}) #need to resolve external symbols whether the component is exported or not (it may have unresolved symbols coming from shared libraries)
			if(INT_DEP_SHARED_LIBS)
				list(APPEND result ${INT_DEP_SHARED_LIBS})
			endif()
		elseif(${package}_${int_dep}_TYPE STREQUAL "SHARED")
			# no need to link internal dependencies with symbolic links (they will be found automatically)
			is_Bin_Component_Exporting_Other_Components(EXPORTING ${package} ${int_dep} ${mode})
			if(EXPORTING) # doing transitive search only if shared libs export something
				get_Bin_Component_Runtime_Dependencies(INT_DEP_SHARED_LIBS ${package} ${int_dep} ${mode}) #need to resolve external symbols whether the component is exported or not
				if(INT_DEP_SHARED_LIBS)# guarding against shared libs presence
					list(APPEND result ${INT_DEP_SHARED_LIBS})
				endif()
			endif() #no need to resolve external symbols if the shared library component is not exported
		endif()
	endforeach()

	# 4) now returning	
	list(REMOVE_DUPLICATES result)
	set(ALL_SHARED_LIBS ${result} PARENT_SCOPE)
endfunction(get_Bin_Component_Runtime_Dependencies)



#resolving dependencies
function(is_Bin_Component_Exporting_Other_Components RESULT package component mode)
set(${RESULT} FALSE PARENT_SCOPE)
if(mode MATCHES Release)
	set(mode_var_suffix "")
elseif(mode MATCHES Debug)
	set(mode_var_suffix "_DEBUG")
else()
	message(FATAL_ERROR "Bug : unknown mode ${mode}")
	return()
endif()
#scanning external dependencies
if(${package}_${component}_LINKS${mode_var_suffix}) #only exported links here
	set(${RESULT} TRUE PARENT_SCOPE)
	return()
endif()

# scanning internal dependencies
if(${package}_${component}_INTERNAL_DEPENDENCIES${mode_var_suffix})
	foreach(int_dep IN ITEMS ${package}_${component}_INTERNAL_DEPENDENCIES${mode_var_suffix})
		if(${package}_${component}_INTERNAL_EXPORT_${int_dep}${mode_var_suffix})
			set(${RESULT} TRUE PARENT_SCOPE)
			return()
		endif()
	endforeach()		
endif()

# scanning package dependencies
foreach(dep_pack IN ITEMS ${package}_${component}_DEPENDENCIES${mode_var_suffix})
	foreach(ext_dep IN ITEMS ${package}_${component}_DEPENDENCY_${dep_pack}_COMPONENTS${mode_var_suffix})
		if(${package}_${component}_EXPORT_${dep_pack}_${ext_dep}${mode_var_suffix})
			set(${RESULT} TRUE PARENT_SCOPE)
			return()
		endif()
	endforeach()
endforeach()
endfunction(is_Bin_Component_Exporting_Other_Components)

##################################################################################
####################### source package run time dependencies #####################
##################################################################################

### configuring source components (currntly built) runtime paths (links to libraries)
function(create_Source_Component_Symlinks bin_component shared_libs)
foreach(lib IN ITEMS ${shared_libs})
	get_filename_component(A_LIB_FILE ${lib} NAME)
	install(CODE "
		EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} -E create_symlink ${${PROJECT_NAME}_INSTALL_RPATH_DIR}/${bin_component}/${lib} ${A_LIB_FILE}
		)" # creating links "on the fly" when installing
	)
endforeach()
endfunction(create_Source_Component_Symlinks)

### 
function(resolve_Source_Component_Runtime_Dependencies component)
if(	${PROJECT_NAME}_${component}_TYPE STREQUAL "SHARED" 
	OR ${PROJECT_NAME}_${component}_TYPE STREQUAL "APP" 
	OR ${PROJECT_NAME}_${component}_TYPE STREQUAL "EXAMPLE" )
	get_Bin_Component_Runtime_Dependencies(ALL_SHARED_LIBS ${PROJECT_NAME} ${component} ${CMAKE_BUILD_TYPE})
	create_Source_Component_Symlinks(${component}${INSTALL_NAME_SUFFIX} "${ALL_SHARED_LIBS}")
endif()
endfunction(resolve_Source_Component_Runtime_Dependencies)

