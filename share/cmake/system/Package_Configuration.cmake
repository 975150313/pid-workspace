
#######################################################################################################
############# variables generated by generic functions using the Use<package>-<version>.cmake #########
############# files of each dependent package - contain full path information #########################
#######################################################################################################
# for libraries components
# XXX_YYY_INCLUDE_DIRS[_DEBUG]			# all include path to use to build an executable with the library component YYY of package XXX
# XXX_YYY_DEFINITIONS[_DEBUG]			# all definitions to use to build an executable with the library component YYY of package XXX
# XXX_YYY_LIBRARIES[_DEBUG]			# all libraries path to use to build an executable with the library component YYY of package XXX

########### this part is for runtime purpose --- see later ##############
# for application components
# XXX_YYY_EXECUTABLE[_DEBUG]			# path to the executable component YYY of package XXX
# XXX_YYY_RUNTIME_LIBRARY_DIRS[_DEBUG]		# all path to folders containing all shared libraries used by the executable component YYY of package XXX 

# for "launch" components (not currently existing)
# XXX_YYY_APPS[_DEBUG]				# all executables to find for global distributed application to work defined by launch component YYY of package XXX
# XXX_YYY_APP_ZZZ_PARAMS[_DEBUG]		# all parameters used  
# XXX_YYY_APP_ZZZ_PARAM_VVV			# string parameter VVV for application ZZZ used by the launch file YYY of package XXX 
##################################################################################
##################    auxiliary functions for utility purposes ###################
##################################################################################

macro(test_Package_Location package dependency)
	if(NOT ${${dependency}_FOUND})

		if(${${package}_DEPENDANCY_${dependency}_VERSION} STREQUAL "")
			message(SEND_ERROR "The required package ${a_dependency} has not been found !")
		elseif(${${package}_DEPENDANCY_${dependency}_VERSION_EXACT})
			message(SEND_ERROR "The required package ${a_dependency} with exact version ${${package}_DEPENDANCY_${dependency}_VERSION} has not been found !")
		else()
			message(SEND_ERROR "The required package ${a_dependency} with version compatible with ${${package}_DEPENDANCY_${dependency}_VERSION} has not been found !")
		endif()
		list(APPEND ${package}_DEPENDANCIES_NOTFOUND ${dependency})
	endif()
endmacro()

###
# each dependent package version is defined as ${package}_DEPENDENCY_${dependency}_VERSION
# other variables set by the package version use file 
# ${package}_DEPENDANCY_${dependency}_REQUIRED		# TRUE if package is required FALSE otherwise (QUIET MODE)
# ${package}_DEPENDANCY_${dependency}_VERSION		# version if a version if specified
# ${package}_DEPENDENCY_${dependency}_VERSION_EXACT	# TRUE if exact version is required
# ${package}_DEPENDENCY_${dependency}_COMPONENTS	# list of components
macro(locate_Package package dependency)

	if(	NOT ${${package}_DEPENDANCY_${dependency}_VERSION} STREQUAL ""
		AND ${${package}_DEPENDENCY_${dependency}_VERSION_EXACT}) #an exact version has been specified
			#WARNING recursive call to find package
		find_package(
			${dependency} 
			${${package}_DEPENDANCY_${dependency}_VERSION} 
			EXACT
			MODULE
			REQUIRED
			${${package}_DEPENDENCY_${dependency}_COMPONENTS}
		)

	else()
		#WARNING recursive call to find package
		find_package(
			${dependency} 
			${${package}_DEPENDANCY_${dependency}_VERSION} 
			MODULE
			REQUIRED
			${${package}_DEPENDENCY_${dependency}_COMPONENTS}
		)
	
	endif()

	test_Package_Location(${package} ${dependency})

endmacro()

##################################################################################
##################    auxiliary functions fill exported variables ################
##################################################################################

###
macro (update_Config_Include_Dirs package component path)
	set(${package}_${component}_INCLUDE_DIRS ${${package}_${component}_INCLUDE_DIRS} ${path} CACHE INTERNAL "")
endmacro(update_Config_Include_Dirs package component path)

###
macro (update_Config_Include_Dirs_Debug package component path)
	set(${package}_${component}_INCLUDE_DIRS_DEBUG ${${package}_${component}_INCLUDE_DIRS_DEBUG} ${path} CACHE INTERNAL "")
endmacro(update_Config_Include_Dirs_Debug package component path)

###
macro (update_Config_Definitions package component defs)
	set(${package}_${component}_DEFINITIONS ${${package}_${component}_DEFINITIONS} ${defs} CACHE INTERNAL "")
endmacro(update_Config_Definitions package component defs)


###
macro (update_Config_Definitions_Debug package component defs)
	set(${package}_${component}_DEFINITIONS_DEBUG ${${package}_${component}_DEFINITIONS_DEBUG} ${defs} CACHE INTERNAL "")
endmacro(update_Config_Definitions_Debug package component defs)

###
macro (update_Config_Libraries package component links)
	set(${package}_${component}_LIBRARIES ${${package}_${component}_LIBRARIES} ${links} CACHE INTERNAL "")
endmacro(update_Config_Libraries package component links)

###
macro (update_Config_Libraries_Debug package component links)
	set(${package}_${component}_LIBRARIES_DEBUG ${${package}_${component}_LIBRARIES_DEBUG} ${links} CACHE INTERNAL "")
endmacro(update_Config_Libraries_Debug package component links)

###
macro (init_Component_Variables package component path_to_version )
	set(${package}_${component}_INCLUDE_DIRS "" CACHE INTERNAL "")
	set(${package}_${component}_INCLUDE_DIRS_DEBUG "" CACHE INTERNAL "")
	set(${package}_${component}_DEFINITIONS "" CACHE INTERNAL "")
	set(${package}_${component}_DEFINITIONS_DEBUG "" CACHE INTERNAL "")
	set(${package}_${component}_LIBRARIES "" CACHE INTERNAL "")
	set(${package}_${component}_LIBRARIES_DEBUG "" CACHE INTERNAL "")
	set(${package}_${component}_EXECUTABLE "" CACHE INTERNAL "")
	set(${package}_${component}_EXECUTABLE_DEBUG "" CACHE INTERNAL "")
	is_Executable_Component(COMP_IS_EXEC ${package} ${component})
	
	if(NOT COMP_IS_EXEC)
		#exported include dirs (cflags -I<path>)
		set(${package}_${component}_INCLUDE_DIRS "${path_to_version}/include/${${package}_${component}_HEADER_DIR_NAME}" CACHE INTERNAL "")
		set(${package}_${component}_INCLUDE_DIRS_DEBUG "${path_to_version}/include/${${package}_${component}_HEADER_DIR_NAME}" CACHE INTERNAL "")
		#additional exported include dirs (cflags -I<path>)
		if(${${package}_${component}_INC_DIRS})
			set(	${package}_${component}_INCLUDE_DIRS 
				${${package}_${component}_INCLUDE_DIRS} 
				${${package}_${component}_INC_DIRS} 
				CACHE INTERNAL "")
		endif()
		if(${${package}_${component}_INC_DIRS_DEBUG})
			set(	${package}_${component}_INCLUDE_DIRS_DEBUG 
				${${package}_${component}_INCLUDE_DIRS_DEBUG}				
				${${package}_${component}_INC_DIRS} 
				CACHE INTERNAL "")		
		endif()
		#exported additionnal cflags
		if(${${package}_${component}_DEFS}) 	
			set(${package}_${component}_DEFINITIONS ${${package}_${component}_DEFS} CACHE INTERNAL "")
		endif()
		if(${${package}_${component}_DEFS_DEBUG})	
			set(${package}_${component}_DEFINITIONS_DEBUG ${${package}_${component}_DEFS_DEBUG} CACHE INTERNAL "")
		endif()

		#exported library (ldflags -l<path>)
		set(${package}_${component}_LIBRARIES "${path_to_version}/lib/${${package}_${component}_BINARY_NAME}" CACHE INTERNAL "")
		set(${package}_${component}_LIBRARIES_DEBUG "${path_to_version}/lib/${${package}_${component}_BINARY_NAME_DEBUG}" CACHE INTERNAL "")
		
		#exported additionnal ld flags
		if(${${package}_${component}_LINKS})
			set(	${package}_${component}_LIBRARIES 
				${${package}_${component}_LIBRARIES}
				${${package}_${component}_LINKS} 
				CACHE INTERNAL "")
		endif()
		if(${${package}_${component}_LINKS_DEBUG})	
			set(	${package}_${component}_LIBRARIES_DEBUG 
				${${package}_${component}_LIBRARIES_DEBUG}
				${${package}_${component}_LINKS_DEBUG} 
				CACHE INTERNAL "")
		endif()
		
	elseif(${${package}_${component}_TYPE} STREQUAL "APP")
		
		set(${package}_${component}_EXECUTABLE "${path_to_version}/bin/${${package}_${component}_BINARY_NAME}" CACHE INTERNAL "")
		set(${package}_${component}_EXECUTABLE_DEBUG "${path_to_version}/bin/${${package}_${component}_BINARY_NAME_DEBUG}" CACHE INTERNAL "")
	endif()

endmacro (init_Component_Variables package component)

###
macro (update_Component_Build_Variables_With_Dependency package component dep_package dep_component)

if(${package} STREQUAL ${dep_package})
	if(${${package}_${component}_INTERNAL_EXPORT_${dep_component}})
		update_Config_Include_Dirs(${package} ${component} ${${dep_package}_${dep_component}_INCLUDE_DIRS})
		update_Config_Include_Dirs_Debug(${package} ${component} ${${dep_package}_${dep_component}_INCLUDE_DIRS_DEBUG})
		update_Config_Definitions(${package} ${component} ${${dep_package}_${dep_component}_DEFINITIONS})
		update_Config_Definitions_Debug(${package} ${component} ${${dep_package}_${dep_component}_DEFINITIONS_DEBUG})
		
	endif()
else()
	if(${${package}_${component}_EXPORT_${dep_package}_${dep_component}})
		update_Config_Include_Dirs(${package} ${component} ${${dep_package}_${dep_component}_INCLUDE_DIRS})
		update_Config_Include_Dirs_Debug(${package} ${component} ${${dep_package}_${dep_component}_INCLUDE_DIRS_DEBUG})
		update_Config_Definitions(${package} ${component} ${${dep_package}_${dep_component}_DEFINITIONS})
		update_Config_Definitions_Debug(${package} ${component} ${${dep_package}_${dep_component}_DEFINITIONS_DEBUG})
	endif()
endif()

# libraries are always exported to enable the linking	
update_Config_Libraries(${package} ${component} ${${dep_package}_${dep_component}_LIBRARIES})
update_Config_Libraries_Debug(${package} ${component} ${${dep_package}_${dep_component}_LIBRARIES_DEBUG})
endmacro()

# configurer le path pour pouvoir les trouver via ccmake !!
#TODO managing the automatic installation of binay packages or git repo (if not exist) !!

##################################################################################
##################################  main macro  ##################################
##################################################################################

macro(configure_Package_Build_Variables package_name path_to_version)
# 1) initializing all build variable that are internal to each component
foreach(a_component IN ITEMS ${${package_name}_COMPONENTS})
	init_Component_Variables ${package_name} ${a_component} ${path_to_version})
endforeach()

# 2) managing package dependencies (the list of dependent packages is defined as ${package_name}_DEPENDENCIES)
# - locating dependent packages in the workspace and configuring their build variables recursively 
foreach(a_dependency IN ITEMS ${${package_name}_DEPENDENCIES}) 
	locate_Package(${${package_name} ${a_dependency})
endforeach()

if(${${package}_DEPENDANCIES_NOTFOUND ${dependency}})
	message(FATAL_ERROR "Some dependencies have not been found exitting")
	#TODO here managing the automatic installation of binay packages or git repo (if not exist)
endif()

# 3) setting build variables with informations coming from package dependancies
foreach(a_component IN ITEMS ${${package_name}_COMPONENTS}) 
	foreach(a_package IN ITEMS ${${package_name}_${a_component}_DEPENDENCIES}) 
		foreach(a_dep_component IN ITEMS ${${package_name}_${a_component}_DEPENDANCY_${a_package}_COMPONENTS}) 
			update_Component_Build_Variables_With_Dependency (${package_name} ${a_component} ${a_package} ${a_dep_component})
		endforeach()
	endforeach()		
endforeach()

#4) setting build variables with informations coming from INTERNAL package dependancies
# these have not been checked like the others since the package components discovering mecanism has already done the job 
foreach(a_component IN ITEMS ${${package_name}_COMPONENTS}) 
	foreach(a_dep_component IN ITEMS ${${package_name}_${a_component}_INTERNAL_DEPENDENCIES}) 
		update_Component_Build_Variables_With_Dependency (${package_name} ${a_component} ${package_name} ${a_dep_component})
	endforeach()
endforeach()

# no need to check system/external dependencies as they are already  treaten as special cases (see variable <package>__<component>_LINKS and <package>__<component>_DEFS of components)
# quite like in pkg-config tool
endmacro(configure_Package_Build_Variables package_name)

