####################################################
################ auxiliary macro ###################
####################################################
macro(exitFindScript message_to_send)
	if(${@PROJECT_NAME@_FIND_REQUIRED})
		message(SEND_ERROR message_to_send)#fatal error
		return()
	elseif(${@PROJECT_NAME@_FIND_QUIETLY})
		return()#simply exitting
	else(${@PROJECT_NAME@_FIND_QUIETLY})
		message(STATUS message_to_send)#simple notification message
		return() 
	endif(${@PROJECT_NAME@_FIND_REQUIRED})
endmacro(exitFindScript message_to_send)

####################################################
####### @PROJECT_NAME@ find script begins here #####
####################################################
set(@PROJECT_NAME@_FOUND FALSE CACHE INTERNAL "")

#workspace dir must be defined for each package build
set(PACKAGE_@PROJECT_NAME@_SEARCH_PATH
    ${PACKAGE_BINARY_INSTALL_DIR}/@PROJECT_NAME@
    CACHE
    INTERNAL
    "path to the package install dir containing versions of the @PROJECT_NAME@ package"
  )

check_Directory_Exists(EXIST ${PACKAGE_@PROJECT_NAME@_SEARCH_PATH})
if(EXIST)
	# at this stage the only thing to do is to check for versions

	#variables that will be filled by generic functions
	if(@PROJECT_NAME@_FIND_VERSION)
		if(@PROJECT_NAME@_FIND_VERSION_EXACT) #using a specific version (only patch number can be adapted, first searching if there is any local version matching constraints, otherwise search for a non local version)
			check_Exact_Version(VERSION_HAS_BEEN_FOUND "@PROJECT_NAME@" ${PACKAGE_@PROJECT_NAME@_SEARCH_PATH} ${@PROJECT_NAME@_FIND_VERSION_MAJOR} ${@PROJECT_NAME@_FIND_VERSION_MINOR})
		else() #using the best version as regard of version constraints (only non local version are used)
			check_Best_Version(VERSION_HAS_BEEN_FOUND "@PROJECT_NAME@" ${PACKAGE_@PROJECT_NAME@_SEARCH_PATH} ${@PROJECT_NAME@_FIND_VERSION_MAJOR} ${@PROJECT_NAME@_FIND_VERSION_MINOR})
		endif()
	else(@PROJECT_NAME@_FIND_VERSION) #no specific version targetted using last available version (takes the last version available either local or non local - local first)
		check_Last_Version(VERSION_HAS_BEEN_FOUND "@PROJECT_NAME@" ${PACKAGE_@PROJECT_NAME@_SEARCH_PATH})
	endif(@PROJECT_NAME@_FIND_VERSION)

	if(VERSION_HAS_BEEN_FOUND)#a good version of the package has been found
		set(PATH_TO_PACKAGE_VERSION ${PACKAGE_@PROJECT_NAME@_SEARCH_PATH}/${@PROJECT_NAME@_VERSION_RELATIVE_PATH})		
		if(@PROJECT_NAME@_FIND_COMPONENTS) #specific components must be checked, taking only selected components	
				
			select_Components(@PROJECT_NAME@ ${@PROJECT_NAME@_VERSION_STRING} ${PATH_TO_PACKAGE_VERSION} ${@PROJECT_NAME@_FIND_COMPONENTS})
			if(USE_FILE_NOTFOUND)
				exitFindScript("The @PROJECT_NAME@ version selected (${@PROJECT_NAME@_VERSION_STRING}) has no configuration file or file is corrupted")
			endif(USE_FILE_NOTFOUND)

			if(NOT ALL_REQUIRED_COMPONENTS_HAVE_BEEN_FOUND)
				exitFindScript("Some of the requested components of the package @PROJECT_NAME@ are missing (version chosen is ${@PROJECT_NAME@_VERSION_STRING}, requested is ${@PROJECT_NAME@_FIND_VERSION}),either bad names specified or broken package versionning")
			endif(NOT ALL_REQUIRED_COMPONENTS_HAVE_BEEN_FOUND)	
		
		else(@PROJECT_NAME@_FIND_COMPONENTS)#no component check, register all of them
			all_Components("@PROJECT_NAME@" ${@PROJECT_NAME@_VERSION_STRING} ${PATH_TO_PACKAGE_VERSION})
			if(USE_FILE_NOTFOUND)
				exitFindScript("The @PROJECT_NAME@ version selected (${@PROJECT_NAME@_VERSION_STRING}) has no configuration file or file is corrupted")
			endif(USE_FILE_NOTFOUND)
				
		endif(@PROJECT_NAME@_FIND_COMPONENTS)

		#here everything has been found => setting global standard CMake find process variables to adequate values
		set(@PROJECT_NAME@_FOUND TRUE CACHE INTERNAL "")
		set(@PROJECT_NAME@_ROOT_DIR ${PATH_TO_PACKAGE_VERSION} CACHE INTERNAL "")
		set(${PROJECT_NAME}_USED_PACKAGES ${${PROJECT_NAME}_USED_PACKAGES} @PROJECT_NAME@ CACHE INTERNAL "")
		if(@PROJECT_NAME@_FIND_VERSION)
			if(@PROJECT_NAME@_FIND_VERSION_EXACT)
				set(@PROJECT_NAME@_ALL_REQUIRED_VERSIONS CACHE INTERNAL "") #unset all the other required version
				set(@PROJECT_NAME@_REQUIRED_VERSION_EXACT "${@PROJECT_NAME@_FIND_VERSION_MAJOR}.${@PROJECT_NAME@_FIND_VERSION_MINOR}" CACHE INTERNAL "")
			else()
				set(@PROJECT_NAME@_ALL_REQUIRED_VERSIONS ${@PROJECT_NAME@_ALL_REQUIRED_VERSIONS} "${@PROJECT_NAME@_FIND_VERSION_MAJOR}.${@PROJECT_NAME@_FIND_VERSION_MINOR}" CACHE INTERNAL "")	
			endif()
		else()
			set(@PROJECT_NAME@_ALL_REQUIRED_VERSIONS CACHE INTERNAL "") #unset all the other required version
			set(@PROJECT_NAME@_REQUIRED_VERSION_EXACT CACHE INTERNAL "") #unset the exact required version	
		endif()

		#now configuring exported variables
		configure_Package_Build_Variables(@PROJECT_NAME@ ${@PROJECT_NAME@_ROOT_DIR})
	else(VERSION_HAS_BEEN_FOUND)#no adequate version found
		#TODO here automating the download of the adequate package version
		exitFindScript("The package @PROJECT_NAME@ with version ${@PROJECT_NAME@_FIND_VERSION} cannot be found")
	endif(VERSION_HAS_BEEN_FOUND)
		
else(EXIST) #if the directory does not exist it means the package cannot be found
	#TODO here automating the download of the adequate package as regard of version
	exitFindScript("The required package @PROJECT_NAME@ cannot be found")
endif(EXIST)

####################################################
####### @PROJECT_NAME@ find script ends here #######
####################################################

